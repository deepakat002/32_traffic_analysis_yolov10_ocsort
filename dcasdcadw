[1mdiff --git a/main.py b/main.py[m
[1mindex f838942..a9685f4 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -534,9 +534,7 @@[m [mdef process_video(video_path, output_video_path, trail_video_path, speed_heatmap[m
         # Draw blinking count ROI on the frame[m
         draw_blinking_count_roi(frame, blink_state)[m
 [m
[31m-        speed_heatmap_data = [][m
[31m-        count_heatmap_data = [][m
[31m-[m
[32m+[m[32m        speed_heatmap_data = [][m[41m [m
         # Process each tracked object[m
         for obj in tracked_objects:[m
             # Extract object information[m
[36m@@ -582,6 +580,7 @@[m [mdef process_video(video_path, output_video_path, trail_video_path, speed_heatmap[m
                         elif direction == 'bottom_to_top':[m
                             crossed = last_pos[1] > count_roi >= centroid_y[m
 [m
[32m+[m[32m                        ### to ensure uniqueness of counting i.e. same object won't be counted twice[m[41m [m
                         if crossed and obj_id not in counted_objects[pos]:[m
                             crossed_objects[pos] += 1[m
                             counted_objects[pos].add(obj_id)[m
[36m@@ -589,7 +588,6 @@[m [mdef process_video(video_path, output_video_path, trail_video_path, speed_heatmap[m
                             blink_frames[pos] = fps[m
                     [m
                     last_positions[pos][obj_id] = (centroid_x, centroid_y)[m
[31m-                    count_heatmap_data.append(((centroid_x, centroid_y), crossed_objects[pos]))[m
 [m
         # Update blink states for critical positions[m
         for pos in blink_state:[m
